from langchain_core.messages import AIMessage
from pydantic import BaseModel, Field
from typing import Optional, List, Dict

from models.errors import Error


class ToponymSearchArguments(BaseModel):
    """Search arguments for one toponym."""
    toponym: str = Field(description="The toponym to search for")
    params: Optional[Dict] = Field(default=None,
                                   description="The search arguments to use for the GeoNames API call")
    duplicate_of: Optional[str] = Field(default=None,
                                        description="The toponym to reference if the toponym is duplicated")
    generated_by_retry: Optional[bool] = Field(default=False,
                                               description="Whether the toponym was generated by retrying after an "
                                                           "error")

class ToponymSearchArgumentsWithErrors(ToponymSearchArguments):
    errors_per_toponym: List[Error] = Field(description="List of errors in the search arguments of one toponym")

class LLMOutput(BaseModel):
    article_id: str = Field(description="The ID of the article")
    toponyms: List[str] = Field(description="List of toponyms in the article",
                                default=[])
    raw_output: AIMessage = Field(description="The output generated by the LLM model",
                                  default=AIMessage(content=""))
    parsed_output: List[ToponymSearchArguments] = Field(
        description="The parsed output with toponyms and corresponding search arguments",
        default=[])
    fatal_errors: List[Error] = Field(description="List of errors in the output",
                                      default=[])

class ValidatedOutput(LLMOutput):
    valid_toponyms: List[ToponymSearchArguments] = Field(
        description="List of valid toponyms and corresponding search arguments",
        default=[])
    duplicate_toponyms: List[ToponymSearchArguments] = Field(
        description="List of duplicate toponyms and corresponding valid toponym",
        default=[])
    invalid_toponyms: List[ToponymSearchArgumentsWithErrors] = Field(
        description="List of invalid toponyms and corresponding search arguments and errors",
        default=[])

